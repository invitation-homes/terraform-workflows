# This workflow takes a comma separated list of directories and converts them to
# an array that is then passed to each job. Since each job is Terraform specific,
# there is a step in each to check for the existence of .tf files in the directory.
# If there are no files with a .tf extension, then all of the jobs will be skipped.
# This is particularly useful when passing any changed directories from a PR into
# the workflow.

# For projects that are NOT terraform modules

name: Lint
on:
  workflow_call:
    inputs:
      directories:
        required: true
        type: string

jobs:
  set-directories: # Convert comma separated list of directories to JSON array
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.set-directories.outputs.directories }}
    steps:
      - name: Set Directories
        id: set-directories
        run: echo "directories=$(echo ${{ inputs.directories }} | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT
  
  tf-fmt:
    runs-on: ubuntu-latest
    needs: [set-directories]
    strategy:
      matrix:
        directory: ${{ fromJson(needs.set-directories.outputs.directories) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Check for TF files"
        id: check-tf-files
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.directory }}/*.tf"

      - name: Setup Terraform
        if: steps.check-tf-files.outputs.files_exists == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1

      - name: Terraform Format
        id: fmt
        if: steps.check-tf-files.outputs.files_exists == 'true'
        run: terraform fmt -check
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - uses: actions/github-script@v6
        if: steps.fmt.outcome == 'failure'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            \nDirectory: ${{ matrix.directory }}
            \nRun \`terraform fmt -recursive\` to resolve. [link](https://www.terraform.io/cli/commands/fmt)`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform fmt Status
        if: steps.fmt.outcome == 'failure'
        run: exit 1

  tflint:
    runs-on: ubuntu-latest
    needs: [set-directories]
    strategy:
      matrix:
        directory: ${{ fromJson(needs.set-directories.outputs.directories) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Check for TF files"
        id: check-tf-files
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.directory }}/*.tf"

      - name: Get Rules
        if: steps.check-tf-files.outputs.files_exists == 'true'
        uses: actions/checkout@v3
        with:
          repository: invitation-homes/terraform-workflows
          path: ${{ matrix.directory }}/custom-linting-rules
          token: ${{ secrets.GH_REPO_ACCESS_TOKEN }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        if: steps.check-tf-files.outputs.files_exists == 'true'
        with:
          tflint_version: latest

      - name: Initialize TFLint
        if: steps.check-tf-files.outputs.files_exists == 'true'
        working-directory: ${{ matrix.directory }}
        run: tflint --init --config=./custom-linting-rules/.tflint.hcl

      - name: Run TFLint
        id: tflint
        if: steps.check-tf-files.outputs.files_exists == 'true'
        working-directory: ${{ matrix.directory  }}
        run: |
          tflint -f compact --config=./custom-linting-rules/.tflint.hcl --no-color | tee tflint.log
          result_code=${PIPESTATUS[0]}
          LOG="$(cat tflint.log)"
          # GitHub Actions does not support multi-line strings as outputs, so line breaks must be encoded
          # they will automatically be substituted back in during GitHub Actions interpolation later, before script execution
          # first, encode % so that instances of it aren't mistaken for encodings later
          LOG="${LOG//'%'/%25}"
          LOG="${LOG//$'\n'/%0A}"
          LOG="${LOG//$'\r'/%0D}"
          # escape any backticks, which delimit template literals in Node.js (raw strings)
          # and escape '$' which will also trip up the Node.js interpolation in the github-script step
          LOG="${LOG//\`/\\\`}"
          LOG="${LOG//\$/\\\$}"
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
          echo "response=$LOG" >> $GITHUB_OUTPUT
          # exit with the pertinent error code only after we have exposed the output for later steps 
          exit $result_code
        continue-on-error: true

      - uses: actions/github-script@v6
        if: steps.tflint.outcome == 'failure'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // interpret tflint output as a template literal (raw string)
            // GitHub Actions will reinsert the line breaks and % during its interpolation before script execution
            var tflint = String.raw`${{ steps.tflint.outputs.response }}`;
            // put back the characters which were escaped by bash, now we have correctly ingested the raw output
            tflint = tflint.replace(/\\\$/g, '$')
            tflint = tflint.replace(/\\\`/g, '`')
            const output = `#### TFLint ðŸ“–\`${{ steps.tflint.outcome }}\`
            <details><summary>Directory: ${{ matrix.directory }}</summary>
            \`\`\`
            ${tflint}
            \`\`\`
            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: TFLint Status
        if: steps.tflint.outcome == 'failure'
        run: exit 1

  kics:
    runs-on: ubuntu-latest
    needs: [set-directories]
    strategy:
      matrix:
        directory: ${{ fromJson(needs.set-directories.outputs.directories) }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Check for terraform files
        id: check-tf-files
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.directory }}/*.tf"

      - name: Run KICS
        id: kics
        if: steps.check-tf-files.outputs.files_exists == 'true'
        uses: checkmarx/kics-github-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ matrix.directory }}
          output_path: kics_results/
          fail_on: high,medium
          enable_comments: true
          exclude_paths: .github/*,test/*
          exclude_queries: 0afbcfe9-d341-4b92-a64c-7e6de0543879

      - name: Display KICS results
        if: steps.check-tf-files.outputs.files_exists == 'true'
        run: |
          cat kics_results/results.json